// Initially generated by #SNMP MIB Compiler Pro 2.1.2.0
// IMPORTANT: This file can be modified, but won't be updated by the compiler again.
// Original file name is C:\Users\lextudio\source\repos\test-field\ip-mib\IP-MIB.mib
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.NetworkInformation;
using Lextm.SharpSnmpLib;
using Samples.Pipeline;
// using Lextm.SharpSnmpPro.Mib; // TODO: Uncomment if syntax validation is required.

namespace IP_MIB
{

    partial class ipForwarding
    {
        private ISnmpData _data = new Integer32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipForwarding", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipDefaultTTL
    {
        private ISnmpData _data = new Integer32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipDefaultTTL", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipInReceives
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipInHdrErrors
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipInAddrErrors
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipForwDatagrams
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipInUnknownProtos
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipInDiscards
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipInDelivers
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipOutRequests
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipOutDiscards
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipOutNoRoutes
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipReasmTimeout
    {
        private ISnmpData _data = new Integer32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipReasmReqds
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipReasmOKs
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipReasmFails
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipFragOKs
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipFragFails
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipFragCreates
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }


    partial class ipAdEntAddr
    {
        private ISnmpData _data = new IP("127.0.0.1");

        void OnCreate(string index)
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipAdEntIfIndex
    {
        private ISnmpData _data = new Integer32(0);

        void OnCreate(string index)
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipAdEntNetMask
    {
        private ISnmpData _data = new IP("127.0.0.1");

        void OnCreate(string index)
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipAdEntBcastAddr
    {
        private ISnmpData _data = new Integer32(0);

        void OnCreate(string index)
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipAdEntReasmMaxSize
    {
        private ISnmpData _data = new Integer32(0);

        void OnCreate(string index)
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }


    partial class ipNetToMediaIfIndex
    {
        public ipNetToMediaIfIndex(NetworkInterface ni, params string[] indexes)
            : this(indexes)
        {
            _data = new Integer32(int.Parse(indexes[0]));
        }

        private ISnmpData _data;

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipNetToMediaIfIndex", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipNetToMediaPhysAddress
    {
        public ipNetToMediaPhysAddress(NetworkInterface ni, params string[] indexes)
            : this(indexes)
        {
            _data = new OctetString(ni.GetPhysicalAddress().GetAddressBytes());
        }
        private ISnmpData _data;

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipNetToMediaPhysAddress", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipNetToMediaNetAddress
    {
        public ipNetToMediaNetAddress(NetworkInterface ni, params string[] indexes)
            : this(indexes)
        {
            _data = new IP(indexes[1].ToString());
        }
        private ISnmpData _data = new IP("127.0.0.1");

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipNetToMediaNetAddress", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipNetToMediaType
    {
        public ipNetToMediaType(NetworkInterface ni, params string[] indexes)
            : this(indexes)
        {
            _data = new Integer32(3);
        }

        private ISnmpData _data;

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipNetToMediaType", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipRoutingDiscards
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpInMsgs
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpInErrors
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpInDestUnreachs
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpInTimeExcds
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpInParmProbs
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpInSrcQuenchs
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpInRedirects
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpInEchos
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpInEchoReps
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpInTimestamps
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpInTimestampReps
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpInAddrMasks
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpInAddrMaskReps
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutMsgs
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutErrors
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutDestUnreachs
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutTimeExcds
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutParmProbs
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutSrcQuenchs
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutRedirects
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutEchos
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutEchoReps
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutTimestamps
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutTimestampReps
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutAddrMasks
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutAddrMaskReps
    {
        private ISnmpData _data = new Counter32(0);

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipNetToMediaTable
    {
        public ipNetToMediaTable()
        {
            // TODO: add rows and columns here.
            NetworkChange.NetworkAddressChanged +=
                (sender, args) => LoadElements();

            NetworkChange.NetworkAvailabilityChanged +=
                (sender, args) => LoadElements();

            LoadElements();
        }

        private void LoadElements()
        {
            _elements.Clear();
            var interfaces = NetworkInterface.GetAllNetworkInterfaces();
            var columnTypes = new[]
                {
                    typeof(ipNetToMediaIfIndex),
                    typeof(ipNetToMediaPhysAddress),
                    typeof(ipNetToMediaNetAddress),
                    typeof(ipNetToMediaType),
                };
            foreach (var type in columnTypes)
            {
                for (int i = 0; i < interfaces.Length; i++)
                {
                    var addresses = interfaces[i].GetIPProperties().UnicastAddresses;
                    for (int j = 0; j < addresses.Count; j++)
                    {
                        var address = addresses[j].Address;
                        if (address.AddressFamily != System.Net.Sockets.AddressFamily.InterNetwork)
                        {
                            continue;
                        }

                        _elements.Add((ScalarObject)Activator.CreateInstance(type, [interfaces[i], (i + 1).ToString(), address.ToString()]));
                    }
                }
            }
        }
    }
}
