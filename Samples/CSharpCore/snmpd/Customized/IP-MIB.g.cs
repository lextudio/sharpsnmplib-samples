// Initially generated by MibSourceGenerator 1.0.0.0
// IMPORTANT: This file can be modified, but won't be updated by the generator again once created.
// Original file name is C:\Users\lextm\source\repos\sharpmibsuite\sharpsnmplib-samples\Samples\CSharpCore\snmpd\Mibs\IP-MIB.txt
using System;
using System.Collections.Generic;
using Lextm.SharpSnmpLib;
using Samples.Pipeline;
using System.Linq;
using System.Net.NetworkInformation;
// using Lextm.SharpSnmpPro.Mib; // TODO: Uncomment if syntax validation is required.

namespace IP_MIB
{

    partial class ipForwarding
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipForwarding", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipDefaultTTL
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipDefaultTTL", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipReasmTimeout
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipv6IpForwarding
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipv6IpForwarding", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipv6IpDefaultHopLimit
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipv6IpDefaultHopLimit", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipv4InterfaceTableLastChange
    {
        private ISnmpData _data = new TimeTicks(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipv4InterfaceTable
    {
        void OnCreate()
        {
            // TODO: Add table entries here
        }
    }

    partial class ipv4InterfaceIfIndex
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipv4InterfaceIfIndex", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipv4InterfaceReasmMaxSize
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipv4InterfaceEnableStatus
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipv4InterfaceEnableStatus", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipv4InterfaceRetransmitTime
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipv6InterfaceTableLastChange
    {
        private ISnmpData _data = new TimeTicks(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipv6InterfaceTable
    {
        void OnCreate()
        {
            // TODO: Add table entries here
        }
    }

    partial class ipv6InterfaceIfIndex
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipv6InterfaceIfIndex", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipv6InterfaceReasmMaxSize
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipv6InterfaceIdentifier
    {
        private ISnmpData _data = OctetString.Empty; // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipv6InterfaceEnableStatus
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipv6InterfaceEnableStatus", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipv6InterfaceReachableTime
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipv6InterfaceRetransmitTime
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipv6InterfaceForwarding
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipv6InterfaceForwarding", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipSystemStatsTable
    {
        void OnCreate()
        {
            // TODO: Add table entries here
        }
    }

    partial class ipSystemStatsIPVersion
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipSystemStatsIPVersion", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipSystemStatsInReceives
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsHCInReceives
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsInOctets
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsHCInOctets
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsInHdrErrors
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsInNoRoutes
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsInAddrErrors
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsInUnknownProtos
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsInTruncatedPkts
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsInForwDatagrams
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsHCInForwDatagrams
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsReasmReqds
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsReasmOKs
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsReasmFails
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsInDiscards
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsInDelivers
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsHCInDelivers
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsOutRequests
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsHCOutRequests
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsOutNoRoutes
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsOutForwDatagrams
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsHCOutForwDatagrams
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsOutDiscards
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsOutFragReqds
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsOutFragOKs
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsOutFragFails
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsOutFragCreates
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsOutTransmits
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsHCOutTransmits
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsOutOctets
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsHCOutOctets
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsInMcastPkts
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsHCInMcastPkts
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsInMcastOctets
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsHCInMcastOctets
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsOutMcastPkts
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsHCOutMcastPkts
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsOutMcastOctets
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsHCOutMcastOctets
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsInBcastPkts
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsHCInBcastPkts
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsOutBcastPkts
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsHCOutBcastPkts
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsDiscontinuityTime
    {
        private ISnmpData _data = new TimeTicks(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipSystemStatsRefreshRate
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsTableLastChange
    {
        private ISnmpData _data = new TimeTicks(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsTable
    {
        void OnCreate()
        {
            // TODO: Add table entries here
        }
    }

    partial class ipIfStatsIPVersion
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipIfStatsIPVersion", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipIfStatsIfIndex
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipIfStatsIfIndex", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipIfStatsInReceives
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsHCInReceives
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsInOctets
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsHCInOctets
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsInHdrErrors
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsInNoRoutes
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsInAddrErrors
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsInUnknownProtos
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsInTruncatedPkts
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsInForwDatagrams
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsHCInForwDatagrams
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsReasmReqds
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsReasmOKs
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsReasmFails
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsInDiscards
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsInDelivers
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsHCInDelivers
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsOutRequests
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsHCOutRequests
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsOutForwDatagrams
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsHCOutForwDatagrams
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsOutDiscards
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsOutFragReqds
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsOutFragOKs
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsOutFragFails
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsOutFragCreates
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsOutTransmits
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsHCOutTransmits
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsOutOctets
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsHCOutOctets
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsInMcastPkts
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsHCInMcastPkts
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsInMcastOctets
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsHCInMcastOctets
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsOutMcastPkts
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsHCOutMcastPkts
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsOutMcastOctets
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsHCOutMcastOctets
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsInBcastPkts
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsHCInBcastPkts
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsOutBcastPkts
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsHCOutBcastPkts
    {
        private ISnmpData _data = new Counter64(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsDiscontinuityTime
    {
        private ISnmpData _data = new TimeTicks(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipIfStatsRefreshRate
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipAddressPrefixTable
    {
        void OnCreate()
        {
            // TODO: Add table entries here
        }
    }

    partial class ipAddressPrefixIfIndex
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipAddressPrefixIfIndex", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipAddressPrefixType
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipAddressPrefixType", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipAddressPrefixPrefix
    {
        private ISnmpData _data = OctetString.Empty; // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipAddressPrefixPrefix", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipAddressPrefixLength
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipAddressPrefixLength", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipAddressPrefixOrigin
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipAddressPrefixOnLinkFlag
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipAddressPrefixAutonomousFlag
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipAddressPrefixAdvPreferredLifetime
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipAddressPrefixAdvValidLifetime
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipAddressSpinLock
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipAddressSpinLock", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipAddressTable
    {
        void OnCreate()
        {
            // TODO: Add table entries here
        }
    }

    partial class ipAddressAddrType
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipAddressAddrType", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipAddressAddr
    {
        private ISnmpData _data = OctetString.Empty; // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipAddressAddr", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipAddressIfIndex
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipAddressIfIndex", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipAddressType
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipAddressType", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipAddressPrefix
    {
        private ISnmpData _data = new ObjectIdentifier(".0.0"); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipAddressOrigin
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipAddressStatus
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipAddressStatus", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipAddressCreated
    {
        private ISnmpData _data = new TimeTicks(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipAddressLastChanged
    {
        private ISnmpData _data = new TimeTicks(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipAddressRowStatus
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipAddressRowStatus", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipAddressStorageType
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipAddressStorageType", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipNetToPhysicalTable
    {
        void OnCreate()
        {
            // TODO: Add table entries here
        }
    }

    partial class ipNetToPhysicalIfIndex
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipNetToPhysicalIfIndex", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipNetToPhysicalNetAddressType
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipNetToPhysicalNetAddressType", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipNetToPhysicalNetAddress
    {
        private ISnmpData _data = OctetString.Empty; // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipNetToPhysicalNetAddress", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipNetToPhysicalPhysAddress
    {
        private ISnmpData _data = OctetString.Empty; // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipNetToPhysicalPhysAddress", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipNetToPhysicalLastUpdated
    {
        private ISnmpData _data = new TimeTicks(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipNetToPhysicalType
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipNetToPhysicalType", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipNetToPhysicalState
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipNetToPhysicalRowStatus
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipNetToPhysicalRowStatus", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipv6ScopeZoneIndexTable
    {
        void OnCreate()
        {
            // TODO: Add table entries here
        }
    }

    partial class ipv6ScopeZoneIndexIfIndex
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipv6ScopeZoneIndexIfIndex", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipv6ScopeZoneIndexLinkLocal
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipv6ScopeZoneIndex3
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipv6ScopeZoneIndexAdminLocal
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipv6ScopeZoneIndexSiteLocal
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipv6ScopeZoneIndex6
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipv6ScopeZoneIndex7
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipv6ScopeZoneIndexOrganizationLocal
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipv6ScopeZoneIndex9
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipv6ScopeZoneIndexA
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipv6ScopeZoneIndexB
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipv6ScopeZoneIndexC
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipv6ScopeZoneIndexD
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipDefaultRouterTable
    {
        void OnCreate()
        {
            // TODO: Add table entries here
        }
    }

    partial class ipDefaultRouterAddressType
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipDefaultRouterAddressType", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipDefaultRouterAddress
    {
        private ISnmpData _data = OctetString.Empty; // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipDefaultRouterAddress", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipDefaultRouterIfIndex
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipDefaultRouterIfIndex", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipDefaultRouterLifetime
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipDefaultRouterPreference
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipv6RouterAdvertSpinLock
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipv6RouterAdvertSpinLock", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipv6RouterAdvertTable
    {
        void OnCreate()
        {
            // TODO: Add table entries here
        }
    }

    partial class ipv6RouterAdvertIfIndex
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipv6RouterAdvertIfIndex", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipv6RouterAdvertSendAdverts
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipv6RouterAdvertSendAdverts", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipv6RouterAdvertMaxInterval
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipv6RouterAdvertMaxInterval", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipv6RouterAdvertMinInterval
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipv6RouterAdvertMinInterval", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipv6RouterAdvertManagedFlag
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipv6RouterAdvertManagedFlag", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipv6RouterAdvertOtherConfigFlag
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipv6RouterAdvertOtherConfigFlag", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipv6RouterAdvertLinkMTU
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipv6RouterAdvertLinkMTU", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipv6RouterAdvertReachableTime
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipv6RouterAdvertReachableTime", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipv6RouterAdvertRetransmitTime
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipv6RouterAdvertRetransmitTime", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipv6RouterAdvertCurHopLimit
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipv6RouterAdvertCurHopLimit", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipv6RouterAdvertDefaultLifetime
    {
        private ISnmpData _data = new Gauge32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipv6RouterAdvertDefaultLifetime", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipv6RouterAdvertRowStatus
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipv6RouterAdvertRowStatus", value) to validate data
            set { _data = value; }
        }
    }

    partial class icmpStatsTable
    {
        void OnCreate()
        {
            // TODO: Add table entries here
        }
    }

    partial class icmpStatsIPVersion
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "icmpStatsIPVersion", value) to validate data
            set { _data = value; }
        }
    }

    partial class icmpStatsInMsgs
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpStatsInErrors
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpStatsOutMsgs
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpStatsOutErrors
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpMsgStatsTable
    {
        void OnCreate()
        {
            // TODO: Add table entries here
        }
    }

    partial class icmpMsgStatsIPVersion
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "icmpMsgStatsIPVersion", value) to validate data
            set { _data = value; }
        }
    }

    partial class icmpMsgStatsType
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "icmpMsgStatsType", value) to validate data
            set { _data = value; }
        }
    }

    partial class icmpMsgStatsInPkts
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpMsgStatsOutPkts
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipInReceives
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipInHdrErrors
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipInAddrErrors
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipForwDatagrams
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipInUnknownProtos
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipInDiscards
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipInDelivers
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipOutRequests
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipOutDiscards
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipOutNoRoutes
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipReasmReqds
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipReasmOKs
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipReasmFails
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipFragOKs
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipFragFails
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipFragCreates
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipRoutingDiscards
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipAddrTable
    {
        void OnCreate()
        {
            // TODO: Add table entries here
        }
    }

    partial class ipAdEntAddr
    {
        private ISnmpData _data = new IP("127.0.0.1"); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipAdEntIfIndex
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipAdEntNetMask
    {
        private ISnmpData _data = new IP("127.0.0.1"); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipAdEntBcastAddr
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipAdEntReasmMaxSize
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class ipNetToMediaTable
    {
        void OnCreate()
        {
            // TODO: Add table entries here
        }
    }

    partial class ipNetToMediaIfIndex
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipNetToMediaIfIndex", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipNetToMediaPhysAddress
    {
        private ISnmpData _data = OctetString.Empty; // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipNetToMediaPhysAddress", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipNetToMediaNetAddress
    {
        private ISnmpData _data = new IP("127.0.0.1"); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipNetToMediaNetAddress", value) to validate data
            set { _data = value; }
        }
    }

    partial class ipNetToMediaType
    {
        private ISnmpData _data = new Integer32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            // TODO: Use ObjectRegistryBase.Verify("IP-MIB", "ipNetToMediaType", value) to validate data
            set { _data = value; }
        }
    }

    partial class icmpInMsgs
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpInErrors
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpInDestUnreachs
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpInTimeExcds
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpInParmProbs
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpInSrcQuenchs
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpInRedirects
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpInEchos
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpInEchoReps
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpInTimestamps
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpInTimestampReps
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpInAddrMasks
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpInAddrMaskReps
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutMsgs
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutErrors
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutDestUnreachs
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutTimeExcds
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutParmProbs
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutSrcQuenchs
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutRedirects
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutEchos
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutEchoReps
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutTimestamps
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutTimestampReps
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutAddrMasks
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }

    partial class icmpOutAddrMaskReps
    {
        private ISnmpData _data = new Counter32(0); // TODO: remove initial assignment if you want to do it in constructors.

        void OnCreate()
        {
            // TODO: initialization here
        }

        public override ISnmpData Data
        {
            get { return _data; }
            set { throw new AccessFailureException(); }
        }
    }
}

namespace Lextm.SharpSnmpPro.Mib
{
    /// <summary>
    /// Registration class for IP-MIB MIB objects.
    /// </summary>
    public static partial class ModuleRegister
    {
        /// <summary>
        /// Registers all objects from this module to the specified object store.
        /// </summary>
        /// <param name="store">The object store to register objects with.</param>
        public static void RegisterIP_MIB(ObjectStore store)
        {
            if (store == null)
            {
                throw new ArgumentNullException(nameof(store));
            }

            store.Add(new IP_MIB.ipForwarding());
            store.Add(new IP_MIB.ipDefaultTTL());
            store.Add(new IP_MIB.ipReasmTimeout());
            store.Add(new IP_MIB.ipv6IpForwarding());
            store.Add(new IP_MIB.ipv6IpDefaultHopLimit());
            store.Add(new IP_MIB.ipv4InterfaceTableLastChange());
            store.Add(new IP_MIB.ipv4InterfaceTable());
            store.Add(new IP_MIB.ipv6InterfaceTableLastChange());
            store.Add(new IP_MIB.ipv6InterfaceTable());
            store.Add(new IP_MIB.ipSystemStatsTable());
            store.Add(new IP_MIB.ipIfStatsTableLastChange());
            store.Add(new IP_MIB.ipIfStatsTable());
            store.Add(new IP_MIB.ipAddressPrefixTable());
            store.Add(new IP_MIB.ipAddressSpinLock());
            store.Add(new IP_MIB.ipAddressTable());
            store.Add(new IP_MIB.ipNetToPhysicalTable());
            store.Add(new IP_MIB.ipv6ScopeZoneIndexTable());
            store.Add(new IP_MIB.ipDefaultRouterTable());
            store.Add(new IP_MIB.ipv6RouterAdvertSpinLock());
            store.Add(new IP_MIB.ipv6RouterAdvertTable());
            store.Add(new IP_MIB.icmpStatsTable());
            store.Add(new IP_MIB.icmpMsgStatsTable());
            store.Add(new IP_MIB.ipInReceives());
            store.Add(new IP_MIB.ipInHdrErrors());
            store.Add(new IP_MIB.ipInAddrErrors());
            store.Add(new IP_MIB.ipForwDatagrams());
            store.Add(new IP_MIB.ipInUnknownProtos());
            store.Add(new IP_MIB.ipInDiscards());
            store.Add(new IP_MIB.ipInDelivers());
            store.Add(new IP_MIB.ipOutRequests());
            store.Add(new IP_MIB.ipOutDiscards());
            store.Add(new IP_MIB.ipOutNoRoutes());
            store.Add(new IP_MIB.ipReasmReqds());
            store.Add(new IP_MIB.ipReasmOKs());
            store.Add(new IP_MIB.ipReasmFails());
            store.Add(new IP_MIB.ipFragOKs());
            store.Add(new IP_MIB.ipFragFails());
            store.Add(new IP_MIB.ipFragCreates());
            store.Add(new IP_MIB.ipRoutingDiscards());
            store.Add(new IP_MIB.ipAddrTable());
            store.Add(new IP_MIB.ipNetToMediaTable());
            store.Add(new IP_MIB.icmpInMsgs());
            store.Add(new IP_MIB.icmpInErrors());
            store.Add(new IP_MIB.icmpInDestUnreachs());
            store.Add(new IP_MIB.icmpInTimeExcds());
            store.Add(new IP_MIB.icmpInParmProbs());
            store.Add(new IP_MIB.icmpInSrcQuenchs());
            store.Add(new IP_MIB.icmpInRedirects());
            store.Add(new IP_MIB.icmpInEchos());
            store.Add(new IP_MIB.icmpInEchoReps());
            store.Add(new IP_MIB.icmpInTimestamps());
            store.Add(new IP_MIB.icmpInTimestampReps());
            store.Add(new IP_MIB.icmpInAddrMasks());
            store.Add(new IP_MIB.icmpInAddrMaskReps());
            store.Add(new IP_MIB.icmpOutMsgs());
            store.Add(new IP_MIB.icmpOutErrors());
            store.Add(new IP_MIB.icmpOutDestUnreachs());
            store.Add(new IP_MIB.icmpOutTimeExcds());
            store.Add(new IP_MIB.icmpOutParmProbs());
            store.Add(new IP_MIB.icmpOutSrcQuenchs());
            store.Add(new IP_MIB.icmpOutRedirects());
            store.Add(new IP_MIB.icmpOutEchos());
            store.Add(new IP_MIB.icmpOutEchoReps());
            store.Add(new IP_MIB.icmpOutTimestamps());
            store.Add(new IP_MIB.icmpOutTimestampReps());
            store.Add(new IP_MIB.icmpOutAddrMasks());
            store.Add(new IP_MIB.icmpOutAddrMaskReps());
        }
    }
}
